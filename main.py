from rijksdriehoek import rijksdriehoek
import utils
import pyproj
import math
import time
from VisumPy.AddIn import AddIn
from tkinter import Tk, messagebox
import wx

Tk().withdraw()  # we don't want a full GUI, so keep the root window from appearing

outside_visum_call: bool = 'Visum' not in globals()
# noinspection SpellCheckingInspection
if outside_visum_call:
    # we are running this python file outside Visum,
    # so let us start Visum with some version file and continue with the code
    # Visum = utils.open_visum("lnv bd 2018_di net 18-21 dd23.ver")
    # Visum = utils.open_visum("20241215-BU-003__MLT_2027_Ehv-Duss_3_2023-07-28_02_13_38 versie 3.ver")
    Visum = utils.open_visum("RD.ver")

TITLE = "Rijksdriehoek to UTM conversion"

projection = pyproj.Proj(proj='utm', zone=31, ellps='WGS84')


def rijksdriehoek_to_utm31(x, y):
    rd = rijksdriehoek.Rijksdriehoek(x, y)
    lat, lon = rd.to_wgs()
    return projection(lon, lat)


def convert_visum_object(visum_object):
    x = visum_object.AttValue("XCoord")
    y = visum_object.AttValue("YCoord")
    new_coordinates = rijksdriehoek_to_utm31(x, y)
    visum_object.SetAttValue("XCoord", new_coordinates[0])
    visum_object.SetAttValue("YCoord", new_coordinates[1])


def convert_coordinates_visum_object_list(name, object_list):
    # objectList is a list of Visum objects like Node or Zones having XCoord and YCoord attributes.
    # the corresponding attribute values will be converted
    add_in = AddIn(Visum)
    add_in.ShowProgressDialog(TITLE, f"Reading (XCoord, YCoord) from {name}", 100)
    add_in.UpdateProgressDialog(50)
    x_rd = object_list.GetMultiAttValues("XCoord")
    y_rd = object_list.GetMultiAttValues("YCoord")
    x_utm = []
    y_utm = []
    add_in.UpdateProgressDialog(0, f"Converting (XCoord, YCoord) from {name}")
    for i in range(len(x_rd)):
        new_coordinates = rijksdriehoek_to_utm31(x_rd[i][1], y_rd[i][1])
        x_utm.append((x_rd[i][0], new_coordinates[0]))
        y_utm.append((y_rd[i][0], new_coordinates[1]))
        add_in.UpdateProgressDialog(len(x_utm) * 100 / (len(x_rd) + 1))

    add_in.UpdateProgressDialog(50, f"Writing (XCoord, YCoord) to {name}")
    if len(x_utm) > 0:
        object_list.SetMultiAttValues("XCoord", x_utm)
        object_list.SetMultiAttValues("YCoord", y_utm)


# WKTPoly and WKTSurface are special string attributes containing many coordinates. Examples of corresponding
# attribute values: "MULTIPOLYGON(((270312.5998 564699.7001,270266.6002 564757.3999,270227.3999 564805.4998,
# 270200.9822 564843.5240,270160.9551 564905.0689,270082.4000 565034.7001,270021.8729 565145.7258,269999.6900
# 565186.3801,269965.6138 565166.0522,269685.8002 564998.6000,269569.0841 564924.7548,269477.8002 564867.0002,
# 269225.4999 564715.8998,269093.7500 564630.2498,269075.7998 564637.9001,269050.8700 564645.5981,269025.4999
# 564649.2998,269009.4999 564649.8000,268996.6231 564651.4041,268949.2999 564657.2998,268924.2002 564663.2999,
# 268916.8002 564669.6001,268906.9002 564684.8802,268872.4001 564767.6000,268868.5002 564797.6001,268872.9249
# 564818.6192,268897.0002 564865.7002,268905.1000 564892.6002,268912.7001 564914.4001,268913.6980 564925.1869,
# 268916.3000 564965.2002,268912.7452 564990.1070,268907.9001 565010.7001,268893.2001 565037.7998,268875.3999
# 565056.1202,268847.2000 565076.4000,268827.9001 565088.1002,268791.8999 565099.3002,268763.6999 565105.4002,
# 268741.8002 565108.4000,268719.5000 565110.0000,268696.4180 565107.5332,268668.3998 565106.1001,268634.7000
# 565108.1998,268603.0000 565113.5000,268580.9001 565119.9000,268558.2999 565127.9999,268531.9001 565141.0000,
# 268525.3721 565145.2722,268505.5572 565158.2391,268484.3620 565172.7712,268476.5002 565179.2500,268483.0999
# 565153.7002,268483.9872 565145.8589,268484.6902 565139.6432,268485.2969 565134.2790,268485.5641 565129.9572,
# 268485.0998 565108.7000,268485.8550 565073.4391,268486.1002 565062.0000,268488.1610 565049.0100,268489.4000
# 565041.2000,268495.5000 565021.6001,268497.6002 565011.7001,268500.0568 565002.3330,268504.1211 564981.8008,
# 268507.2002 564957.0999,268504.8998 564939.0002,268497.3002 564924.7999,268477.5872 564905.5871,268465.3002
# 564893.3001,268448.2998 564870.5002,268439.4002 564845.3001,268436.0998 564822.6999,268438.5999 564804.1998,
# 268443.4998 564784.1002,268448.8000 564735.8002,268448.1748 564688.9348,268439.7002 564641.5999,268412.0000
# 564586.0002,268379.2002 564539.0002,268350.5001 564484.9002,268345.2690 564453.1071,268342.9102 564421.6462,
# 268333.5001 564233.2000,268330.9002 564202.4001,268325.9000 564179.6002,268316.5002 564164.9002,268283.3001
# 564149.7998,268272.1999 564122.8998,268284.0998 564093.7998,268292.5002 564065.1001,268285.7500 564036.4998,
# 268258.0001 564013.6999,268220.8002 563991.9999,268187.0999 563977.8000,268166.9998 563899.4999,268105.7001
# 563899.1999,268085.0998 563889.7002,268043.6600 563875.1302,268009.8998 563876.0001,268001.7999 563904.8999,
# 267993.4789 563914.8768,267981.6998 563928.9998,267979.6999 563951.2001,267959.2502 563973.7501,267896.7001
# 563968.8999,267849.1998 563943.2001,267839.1001 563954.2992,267844.8002 563977.5000,267836.6942 563975.9599,
# 267824.8000 563973.6999,267798.2000 563984.4002,267757.5001 563992.5999,267729.5900 563964.2500,267756.9999
# 563920.2999,267784.0002 563904.9998,267822.1002 563887.5001,267833.3801 563871.8099,267828.3000 563854.3999,
# 267813.2001 563820.9002,267812.9661 563791.7331,267812.8002 563771.1000,267809.3002 563752.2000,267788.6999
# 563721.8000,267786.7000 563703.5001,267793.7999 563687.6000,267801.4000 563661.6999,267796.6902 563630.2401,
# 267775.8000 563598.9001,267758.4002 563595.3002,267746.1000 563602.9000,267725.6000 563631.9999,267707.0000
# 563643.9000,267693.9671 563645.5709,267687.5000 563646.4000,267669.0998 563653.3001,267649.2802 563646.4301,
# 267656.3000 563615.6000,267669.2000 563595.7000,267671.8000 563563.0002,267688.2000 563552.4000,267701.5821
# 563550.9421,267724.9000 563548.5000,267754.9000 563557.8000,267765.0598 563552.9302,267757.9000 563525.1000,
# 267749.2810 563509.0031,267739.0000 563489.9000,267735.0668 563485.1853,267723.4000 563471.2000,267706.9002
# 563458.2998,267706.7000 563424.7000,267709.9599 563395.6801,267722.3000 563384.6000,267740.5002 563377.7002,
# 267769.0000 563378.6000,267786.0000 563388.6000,267804.9999 563392.2000,267814.7000 563383.7000,267817.0002
# 563369.6301,267797.1000 563337.8000,267787.3712 563329.2502,267753.0002 563299.7001,267730.2000 563297.1000,
# 267713.3319 563290.0622,267701.2000 563285.1000,267695.4980 563266.0002,267702.6000 563253.7000,267717.4000
# 563239.6000,267734.3000 563235.5000,267746.6002 563226.0002,267743.6000 563202.8000,267730.1000 563185.6000,
# 267731.6999 563162.4999,267738.9000 563152.5000,267760.4000 563153.6000,267788.6999 563150.0998,267813.8000
# 563127.9000,267840.6000 563108.4000,267853.3102 563083.9300,267873.4000 563095.8000,267874.4000 563117.1000,
# 267863.4000 563138.2000,267859.9000 563161.4000,267870.5001 563168.4898,267919.2071 563177.3485,268032.2998
# 563194.4999,268041.1000 563185.4000,268066.1998 563187.7001,268114.6000 563196.3000,268129.7000 563205.5000,
# 268226.1998 563232.9998,268262.5596 563237.9650,268285.3000 563238.7000,268307.6999 563248.2000,268318.0000
# 563277.3000,268322.9000 563287.4000,268335.5302 563291.4303,268347.2000 563286.0000,268364.3000 563273.0000,
# 268380.9000 563271.6000,268399.2000 563267.2000,268411.4000 563255.9000,268428.1000 563246.5000,268452.0000
# 563242.8000,268464.1000 563209.1000,268488.1502 563205.8802,268489.0000 563224.9000,268483.9001 563259.1999,
# 268508.5000 563272.7000,268536.7001 563291.4000,268581.6998 563286.9999,268643.8100 563289.1298,268686.9000
# 563267.6000,268691.0000 563254.6000,268705.3000 563232.8000,268737.7999 563222.6000,268744.1000 563209.2000,
# 268739.4000 563192.8000,268720.2000 563185.1000,268714.5000 563166.8000,268723.8000 563149.4000,268734.4002
# 563134.9001,268750.4000 563117.8000,268804.5002 563113.8999,268821.1000 563107.4000,268863.4000 563068.1000,
# 268907.9000 563069.4000,268944.5302 563036.4302,268958.9000 563012.4000,268971.4000 562972.7000,268981.6000
# 562894.6999,268982.7000 562852.4000,268968.8399 562818.9300,268922.1000 562817.0000,268891.5000 562801.0000,
# 268854.5000 562755.3000,268825.4000 562747.5000,268760.2000 562747.0000,268746.0201 562732.4998,268747.6405
# 562645.2336,268758.7208 562543.7269,268764.0162 562509.6712,268771.6999 562468.0999,268779.1000 562378.3000,
# 268772.6000 562335.8000,268758.4000 562296.0000,268760.4000 562282.1000,268749.8000 562261.0000,268749.5000
# 562233.9000,268758.8000 562221.7000,268751.4002 562183.9998,268733.8000 562120.8000,268724.9000 562080.9000,
# 268725.6000 562044.5000,268706.2000 561997.6000,268680.1000 561980.2000,268677.7000 561957.3000,268661.1000
# 561928.8000,268666.7000 561901.5000,268683.6001 561878.8002,268672.1000 561859.6000,268662.5001 561847.2999,
# 268648.9000 561822.7000,268638.2999 561798.6000,268625.7000 561762.6000,268617.4000 561736.8001,268602.1998
# 561711.9998,268589.6998 561644.7000,268602.6002 561607.3998,268620.3000 561573.9001,268637.9998 561526.6999,
# 268648.0002 561487.8002,268632.8998 561457.2000,268628.1899 561440.9998,268664.8000 561443.3002,268683.3001
# 561410.8998,268684.9001 561371.8998,268707.6999 561322.8000,268689.6002 561294.8002,268746.8802 561191.3102,
# 268987.2002 561205.7998,269014.2000 561213.3999,269008.1999 561243.8998,269056.0371 561260.4471,269097.6002
# 561284.4998,269127.8400 561280.3798,269197.6998 561215.2999,269230.5001 561156.0001,269270.2999 561113.2998,
# 269296.5998 561105.2000,269336.8000 561047.5001,269352.4001 561044.4998,269357.6000 561022.6000,269358.5001
# 560998.6000,269387.0999 560947.6002,269386.0999 560920.8001,269391.1498 560901.3098,269435.7998 560869.6001,
# 269501.3998 560848.6998,269516.5002 560823.5001,269544.8000 560812.6002,269572.5002 560834.7001,269604.9999
# 560838.9001,269614.4002 560814.9001,269591.8000 560773.0000,269615.2998 560750.6999,269655.2998 560714.0002,
# 269698.9222 560728.0649,269758.9998 560737.2000,269790.2400 560732.7399,269825.4000 560572.7998,269917.3998
# 560424.8001,269939.2499 560223.4300,268089.7502 558753.2502,268080.4421 557244.2341,268074.7502 556321.5000,
# 268087.1298 554591.4300,268081.0002 553111.5600,267744.0898 552886.2498,267725.5902 551647.0000,267706.9401
# 550633.3802,267044.9999 550540.7998,266438.6142 550471.3491,266160.4599 550424.8099,265908.0000 550403.9003,
# 265853.5902 550383.2999,265712.7001 550084.7000,265458.9002 549812.6002,265438.9701 549783.4300,265343.2998
# 549584.7003,265276.4398 549244.9299,266544.5901 548926.7500,266209.9899 548084.9099,265379.9902 546038.5698,
# 264592.5598 544105.7498,266294.3798 544132.4998,266533.5902 543286.9999,266733.3998 543362.5598,267064.3699
# 542873.7698,267890.8398 541798.3799,267924.9001 541817.1001,267965.9000 541739.1998,268074.8802 541808.1801,
# 268303.4601 541400.3101,268368.8000 541390.3000,268667.4020 541583.6158,268776.6500 541644.4302,268784.2998
# 541520.8999,268763.0999 541477.9001,268514.9002 541111.2498,268503.2998 540528.1002,268486.9998 540442.1001,
# 268528.8399 540358.7398,269209.4999 540357.3200,269918.6501 540356.0600,269518.7100 541648.0500,270635.0902
# 543239.1801,272394.0779 546334.5309,275613.5498 552003.4999,276650.7031 555986.1139,277332.9400 558606.1802,
# 277693.3532 559128.4320,277783.2998 559190.0998,277756.1812 559219.4712,277843.5899 559346.1298,277532.3103
# 559765.8100,277177.8998 562235.0002,276821.6302 564718.9298,276772.6292 564713.7652,276739.6882 564709.6580,
# 276603.7998 564692.0999,276567.0751 564689.9542,276537.0959 564688.2031,276452.0998 564679.8002,276251.6641
# 564652.7149,276083.7742 564629.0799,275984.0002 564615.0998,275843.7640 564596.5142,275681.4000 564575.6998,
# 275653.6650 564574.6871,275645.8002 564574.3999,275628.6303 564571.8701,275608.1999 564562.2992,275592.7001
# 564545.8999,275566.1002 564528.4002,275546.6079 564518.6328,275497.4262 564493.9872,275424.6392 564458.4252,
# 275009.7779 564258.0719,274899.3820 564203.0872,274590.3900 564057.4212,274374.3731 563951.5498,273791.3561
# 563668.8152,272008.5071 562801.1181,271973.6031 562784.3910,271964.2498 562779.7518,271914.6898 562754.8102,
# 271780.3000 563078.5002,271750.8999 563062.0000,271517.8002 563408.1002,271264.2998 563791.8002,271204.3999
# 563879.9000,271135.4498 564017.5430,271015.4698 564219.8798,270947.6999 564182.6000,270908.6000 564253.3999,
# 270616.2798 564196.4399,270591.3618 564308.3012,270580.2002 564350.6999,270558.2599 564401.8599,270551.0310
# 564414.9902,270534.6998 564443.7999,270513.1000 564478.5002,270480.4001 564527.9999,270455.2998 564551.5001,
# 270406.9998 564612.1998,270347.1808 564668.8838,270312.5998 564699.7001)))" "LINESTRING(136279.0241 553575.5479,
# 140000.0241 553575.5479,140000.0241 553575.5479,140000.0000 553050.0000,137147.0000 553280.0000,136612.2680
# 553872.5960)" "MULTIPOLYGON EMPTY" "LINESTRING EMPTY"

# We split each string in parts like "xxx.xxxx yyy.yyyy". We use the fact that those are the only parts
# containing a space. Firstly we split on "(", convert each part and join again by "(
def convert_geo_field(s):
    if s[-1 * len("EMPTY"):] == "EMPTY":
        return s

    if s[:len("LINESTRING")] == "LINESTRING":
        return convert_line_string(s)  # special case

    return "(".join(map(f2, s.split("(")))


# "Secondly we split on ")", convert each part and join again by ")
def f2(s):
    if " " not in s:
        return s
    return ")".join(map(f3, s.split(")")))


# "Thirdly we split on ",", convert each part and join again by ",
def f3(s):
    if " " not in s:
        return s
    return ",".join(map(f4, s.split(",")))


def f4(s):
    if " " not in s:
        return s
    # now we have a "xxx.xxx yyy.yyy" part
    x, y = map(float, s.split(" "))
    new_coordinates = rijksdriehoek_to_utm31(x, y)
    return f"{new_coordinates[0]:.4f} {new_coordinates[1]:.4f}"


def convert_line_string(s):
    # special precaution as the first and last point need to correspond with the start and end node.
    # we delete them and Visum will add them again, in correspondence with the nodes
    points = s[len("LINESTRING(") + 1:-1].split(",")  # only take what is inside LINESTRING(        and        )
    points = points[1:-1]  # remove first and last point
    if len(points) == 0:
        return "LINESTRING EMPTY"  # we need to make an exception as LINESTRING() does not work as expected
    points = list(map(f4, points))  # convert
    return "LINESTRING(" + ",".join(points) + ")"


def convert_geo_visum_object_list(name, object_list, geo_field):
    add_in = AddIn(Visum)
    add_in.ShowProgressDialog(TITLE, f"Reading {geo_field} from {name}", 100)
    time.sleep(2)
    add_in.UpdateProgressDialog(50)
    rd = object_list.GetMultiAttValues(geo_field)
    utm = []
    add_in.UpdateProgressDialog(0, f"Converting {geo_field} from {name}... {len(rd)}")
    time.sleep(2)
    for x in rd:
        utm.append((x[0], convert_geo_field(x[1])))
        add_in.UpdateProgressDialog(len(utm) * 100 / (len(rd) + 1))

    add_in.UpdateProgressDialog(50, f"Writing {geo_field} to {name}")
    if len(utm) > 0:
        object_list.SetMultiAttValues(geo_field, utm)


RD_AMERSFOORT = (155000, 463000)


def conditional_convert(name, object_list):
    try:
        x_rd = object_list.GetMultiAttValues("XCoord")
        y_rd = object_list.GetMultiAttValues("YCoord")
        # exception when XCoord and YCoord are not present, then do nothing

        x_min = min([x[1] for x in x_rd])
        x_max = max([x[1] for x in x_rd])
        y_min = min([y[1] for y in y_rd])
        y_max = max([y[1] for y in y_rd])

        answer = messagebox.askquestion(TITLE,
                                        f"Table {name} contains {len(object_list)} records. \n" +
                                        "If we consider Apeldoorn in the center, then\n" +
                                        f"XCoord is between {math.floor((x_min - RD_AMERSFOORT[0]) / 1000)} and "
                                        f"{math.ceil((x_max - RD_AMERSFOORT[0]) / 1000)} km and \n" +
                                        f"YCoord is between {math.floor((y_min - RD_AMERSFOORT[1]) / 1000)} and "
                                        f"{math.ceil((y_max - RD_AMERSFOORT[1]) / 1000)} km.\n" +
                                        "\n" +
                                        "Convert?")

        if answer == 'yes':
            convert_coordinates_visum_object_list(name, object_list)

    except (Exception,):
        pass

    for GeoField in ("WKTPoly", "WKTSurface"):
        try:
            rd = object_list.GetMultiAttValues(GeoField)
            answer = messagebox.askquestion(TITLE, f"Convert {GeoField} for {len(rd)} records from {name}?")
            if answer == 'yes':
                convert_geo_visum_object_list(name, object_list, GeoField)
        except (Exception,):
            pass


def main():
    if outside_visum_call:
        app = wx.App(0)
        print(app)  # in order to prevent warning
    # noinspection SpellCheckingInspection
    tables = {
        "Detectors": Visum.Net.Detectors,
        "Mainnodes": Visum.Net.MainNodes,
        "mainzones": Visum.Net.MainZones,
        "nodes": Visum.Net.Nodes,
        "links": Visum.Net.Links,
        "stops": Visum.Net.Stops,
        "stopareas": Visum.Net.StopAreas,
        "territories": Visum.Net.Territories,
        "zones": Visum.Net.Zones}

    for name, table in tables.items():
        if len(table) > 0:
            conditional_convert(name, table)

    messagebox.showinfo(TITLE, "Finished")


main()
